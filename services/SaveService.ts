import { NodePosition } from './NodePositionService';import { SettingsService } from './SettingsService';export interface SaveData {nodes: NodePosition[];timestamp: number;version: string;}type SaveCallback = (data: SaveData) => Promise<void>;export class SaveService {private static instance: SaveService | null = null;private settingsService: SettingsService;private saveCallback?: SaveCallback;private saveTimeoutId?: NodeJS.Timeout;private lastSaveTimestamp = 0;private constructor() {this.settingsService = SettingsService.getInstance();}public static getInstance(): SaveService {if (SaveService.instance === null) {SaveService.instance = new SaveService();}return SaveService.instance;}public setSaveCallback(callback: SaveCallback): void {this.saveCallback = callback;}public async saveNodes(nodes: NodePosition[]): Promise<void> {if (!this.settingsService.isAutosaveEnabled() || !this.saveCallback) {return;}if (this.saveTimeoutId) {clearTimeout(this.saveTimeoutId);}this.saveTimeoutId = setTimeout(() => void this.performSave(nodes),this.settingsService.getAutosaveDebounceMs());}private async performSave(nodes: NodePosition[]): Promise<void> {try {const now = Date.now();const saveData: SaveData = { nodes, timestamp: now, version: '1.0.0' };await this.saveCallback?.(saveData);this.lastSaveTimestamp = now;} catch (error) {console.error('Failed to save nodes:', error);}}public getLastSaveTimestamp(): number {return this.lastSaveTimestamp;}}
